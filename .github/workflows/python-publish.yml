# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Publish Python Package

on:
  release:
    types: [published] # This workflow triggers when a new release is published on GitHub

permissions:
  contents: read # Allow reading of the repository contents by default for all jobs

jobs:
  # Job to run pre-commit hooks for code formatting and basic checks
  pre-commit:
    runs-on: ubuntu-latest # Run on the latest Ubuntu environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Set up Python
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: "3.10" # Use a specific Python version for pre-commit

      - name: Install pre-commit
        run: pip install pre-commit # Install the pre-commit tool

      - name: Run pre-commit hooks
        # This assumes you have a .pre-commit-config.yaml file in your repository root.
        # It will run all configured hooks on all files.
        run: pre-commit run --all-files

  # Job to run linting checks on the codebase using Flake8
  lint:
    runs-on: ubuntu-latest # Run on the latest Ubuntu environment
    needs: [pre-commit] # This job depends on pre-commit checks passing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Set up Python
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: "3.10" # Use a specific Python version for linting

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip # Upgrade pip
          pip install flake8 # Install flake8 for linting

      - name: Run Flake8 linting
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 1-indexed, so line numbers for warnings are shown directly.
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

  # Job to run tests on the codebase across multiple Python versions
  test:
    runs-on: ubuntu-latest # Run on the latest Ubuntu environment
    needs: [pre-commit] # This job depends on pre-commit checks passing
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"] # Test across multiple Python versions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: ${{ matrix.python-version }} # Use the Python version from the matrix
          cache: 'pip' # Cache pip dependencies to speed up subsequent runs

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip # Upgrade pip
          pip install -r requirements.txt # Install dependencies from requirements.txt
          pip install -e . # Install the package in editable mode for testing

      - name: Install pytest
        run: pip install pytest # Install pytest for running tests

      - name: Run tests with pytest
        run: pytest -q # Execute pytest tests with quiet output

  # Job to scan for known security vulnerabilities in dependencies
  security-scan:
    runs-on: ubuntu-latest # Run on the latest Ubuntu environment
    needs: [lint, test] # This job runs after linting and testing
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Set up Python
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: "3.10" # Use a specific Python version for security scanning

      - name: Install security scanner (pip-audit)
        run: pip install pip-audit # Install pip-audit for vulnerability scanning

      - name: Run pip-audit
        # Scans your installed dependencies for known vulnerabilities.
        # Requires a requirements.txt file to be present.
        run: pip-audit -r requirements.txt || true # '|| true' to allow workflow to continue if minor issues are found, consider removing for stricter checks

  # Job to build the source distribution and wheel
  release-build:
    runs-on: ubuntu-latest # Run on the latest Ubuntu environment
    needs: [lint, test, security-scan] # This job depends on linting, testing, and security scan jobs passing
    permissions:
      contents: write # Allow writing to the repository contents to upload artifacts

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to check out your repository code

      - name: Set up Python
        uses: actions/setup-python@v5 # Action to set up Python environment
        with:
          python-version: "3.11" # Use a specific stable Python version for building

      - name: Build release distributions
        run: |
          # Install the 'build' package, which is recommended for building Python distributions
          python -m pip install build
          # Build the source distribution (.tar.gz) and wheel (.whl) files
          python -m build

      - name: Install Twine
        run: pip install twine # Install Twine for checking distributions

      - name: Check distributions with Twine
        # This step validates the built distributions for correctness before uploading.
        run: twine check dist/*

      - name: Upload distributions
        uses: actions/upload-artifact@v4 # Action to upload built artifacts
        with:
          name: release-dists # Name of the artifact
          path: dist/ # Path to the directory containing the built distributions

  # Job to publish the built distributions to PyPI
  pypi-publish:
    runs-on: ubuntu-latest # Run on the latest Ubuntu environment
    needs:
      - release-build # This job depends on the release-build job passing
    permissions:
      id-token: write # IMPORTANT: This permission is mandatory for trusted publishing to PyPI

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi # The environment defined in your GitHub repository settings for PyPI
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      url: https://pypi.org/project/resonance-sandbox/${{ github.event.release.name }} # Example for resonance-sandbox

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4 # Action to download previously uploaded artifacts
        with:
          name: release-dists # Name of the artifact to download
          path: dist/ # Path where the artifact contents will be downloaded

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1 # Action to publish to PyPI using trusted publishing
        with:
          packages-dir: dist/ # Directory containing the distributions to publish
